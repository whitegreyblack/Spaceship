# File: Notes.txt
# Auth: Sam Whang


# Radius and the Double Circles -- Aug 27
Should have a double circle. Outside and an inner circle. Inside circle views
all three attributes (character of terrain, light visibility and unit shown).
Each level from the inner torwards the outside circle lowers the intensity of
the light level. All levels outside the inner circle can only view the light
level and the terrain character. Any units inside the outer circle but out-
side the inner circle cannot be seen except with an "?" character instaed of
its true representation. Any level outside the outer circle is divided into
two categories. Terrain and units. Units are invisible outside the double 
circle. The terrain however is divided again into two categories. Walls and
floors. Floors are invisible after they are outside the circle. Usually this
does not impact the game or should not impact the game so much. However the
walls will remain permanent after they have had their fog of war lifted. The
color of their visibility should be the lowest light level before completely
dark.


# Lights and Multiple LOS -- Sept 7
I want to add light sources to my map. Maybe to allow for lamps and firepits
in the future. Overall goal is to get them working so I can start building
spaceship vehicle interiors. Multiple light sources can add ominence and 
fanciness during town/harbor visits and fear/safety during monster encounters.
Hopefully it won't take too much time. This is more of a extra for this project
since I have not yet finished the basics. So how should I start? First we can
decouple line of sight from map and create a light/shadow class for the map
class to hold instead of using line of sight in the map class.


# Movement Blocking vs Light Blocking -- Sept 13
Light and movement use almost the same amount of data for similar usages. If a
square is found with a certain character then it is considered blocked. During
the sight algorithm the function determines if those blocked characters allow
light to pass through them. This enables a very flexible lighting system where
players are able to see through a square yet not be able to pass due to the 
blocking mechanic. This is especially useful when implementing see through 
blocks such as glass/windows, fences, jail cells and other "materials" that
you would be able to see through but not pass through. Currently this mechanic
is implemented in two seperate data structures. However due to a memory
concern I am hoping to implement it in one datastructure with a list of tuples
that would hold the values instead.

# AI Walkthrough -- Sept 20
Implementing AI will be the next big hurdle in developing the roguelike being
built. Naively, the ai will only have two action types: Move and interact. This
is based off of several open source roguelikes which simplify the ai thought
process. For the move action we have several factors which would affect the 
direction of which the ai unit would take. We can split these factors further
into internal and external motives. We can list a few of these below.
Internal Motives:
    - Health, Stamina, Mana, personal buffs/debuffs and effects
External Motives:
    - Ally/Enemy Units, Items on ground, Environmental hazards
